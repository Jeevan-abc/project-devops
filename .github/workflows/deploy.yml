name: Deploy MERN Stack Application

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install and Build Frontend
        run: |
          cd client
          npm install
          npm run build
        
      - name: Install Backend Dependencies
        run: |
          cd server
          npm install

      - name: Manage DigitalOcean Droplet
        id: create-droplet
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
          SSH_FINGERPRINT: ${{ secrets.SSH_PUBLIC_KEY_FINGERPRINT }}
        run: |
          DROPLET_INFO=$(curl -s -X GET "https://api.digitalocean.com/v2/droplets?name=mern-droplet" \
            -H "Authorization: Bearer $DO_API_TOKEN" \
            -H "Content-Type: application/json")
          
          DROPLET_COUNT=$(echo "$DROPLET_INFO" | jq '.droplets | length')
          
          if [ "$DROPLET_COUNT" -eq 0 ]; then
            echo "Creating new droplet..."
            CREATE_RESPONSE=$(curl -s -X POST "https://api.digitalocean.com/v2/droplets" \
              -H "Authorization: Bearer $DO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"name\": \"mern-droplet\", \"region\": \"nyc3\", \"size\": \"s-1vcpu-1gb\", \"image\": \"ubuntu-22-04-x64\", \"ssh_keys\": [\"$SSH_FINGERPRINT\"], \"backups\": false, \"ipv6\": false, \"monitoring\": true}")
            
            DROPLET_ID=$(echo "$CREATE_RESPONSE" | jq -r '.droplet.id')
            
            for i in {1..30}; do
              STATUS=$(curl -s -X GET "https://api.digitalocean.com/v2/droplets/$DROPLET_ID" \
                -H "Authorization: Bearer $DO_API_TOKEN" | jq -r '.droplet.status')
              if [ "$STATUS" = "active" ]; then break; fi
              echo "Waiting for droplet to be active... ($i/30)"
              sleep 10
            done
            
            DROPLET_IP=$(curl -s -X GET "https://api.digitalocean.com/v2/droplets/$DROPLET_ID" \
              -H "Authorization: Bearer $DO_API_TOKEN" | jq -r '.droplet.networks.v4[0].ip_address')
            
            echo "New droplet created with IP: $DROPLET_IP"
          else
            DROPLET_IP=$(echo "$DROPLET_INFO" | jq -r '.droplets[0].networks.v4[0].ip_address')
            echo "Using existing droplet with IP: $DROPLET_IP"
          fi
          
          echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV

      - name: Debug Secrets
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "SSH_PRIVATE_KEY is empty or not set"
          else
            echo "SSH_PRIVATE_KEY is set (length: ${#SSH_PRIVATE_KEY})"
          fi

      - name: Deploy to Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          debug: true
          script: |
            apt update && apt install -y git nodejs npm
            npm install -g pm2
            if [ ! -d "/root/mern-app" ]; then
              git clone https://github.com/Jeevan-abc/project-devops /root/mern-app
            fi
            cd /root/mern-app
            git fetch origin
            git reset --hard origin/main
            cd server
            npm install
            cd ../client
            npm install
            npm run build
            cd ..
            pm2 restart mern-app || pm2 start server/server.js --name mern-app
            pm2 startup
            pm2 save

      - name: Verify Deployment
        run: |
          sleep 30
          curl -f http://${{ env.DROPLET_IP }}:3000 || exit 1
