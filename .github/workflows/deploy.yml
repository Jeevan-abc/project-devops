name: Deploy MERN to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl jq

      - name: Check or Create Droplet
        id: droplet
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
          SSH_FINGERPRINT: ${{ secrets.SSH_PUBLIC_KEY_FINGERPRINT }}
        run: |
          DROPLET_INFO=$(curl -s -X GET "https://api.digitalocean.com/v2/droplets?name=mern-droplet" \
            -H "Authorization: Bearer $DO_API_TOKEN" \
            -H "Content-Type: application/json")
          DROPLET_COUNT=$(echo "$DROPLET_INFO" | jq '.droplets | length')
          if [ "$DROPLET_COUNT" -eq 0 ]; then
            echo "No Droplet found. Creating 'mern-droplet'..."
            CREATE_RESPONSE=$(curl -s -X POST "https://api.digitalocean.com/v2/droplets" \
              -H "Authorization: Bearer $DO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"name\": \"mern-droplet\", \"region\": \"nyc3\", \"size\": \"s-1vcpu-1gb\", \"image\": \"ubuntu-22-04-x64\", \"ssh_keys\": [\"$SSH_FINGERPRINT\"], \"backups\": false, \"ipv6\": false, \"monitoring\": true}")
            DROPLET_ID=$(echo "$CREATE_RESPONSE" | jq -r '.droplet.id')
            for i in {1..30}; do
              STATUS=$(curl -s -X GET "https://api.digitalocean.com/v2/droplets/$DROPLET_ID" \
                -H "Authorization: Bearer $DO_API_TOKEN" | jq -r '.droplet.status')
              if [ "$STATUS" = "active" ]; then break; fi
              echo "Waiting... ($i/30)"
              sleep 10
            done
            DROPLET_IP=$(curl -s -X GET "https://api.digitalocean.com/v2/droplets/$DROPLET_ID" \
              -H "Authorization: Bearer $DO_API_TOKEN" | jq -r '.droplet.networks.v4[0].ip_address')
            echo "Droplet created: $DROPLET_IP"
          else
            DROPLET_IP=$(echo "$DROPLET_INFO" | jq -r '.droplets[0].networks.v4[0].ip_address')
            echo "Droplet exists: $DROPLET_IP"
          fi
          echo "DROPLET_IP=$DROPLET_IP" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install backend dependencies
        run: |
          cd server
          npm install

      - name: Install frontend dependencies and build
        run: |
          cd client
          npm install
          npm run build

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: |
            apt update && apt install -y nodejs npm git
            npm install -g pm2
            if [ ! -d "/root/mern-cicd-digitalocean" ]; then
              git clone https://github.com/Jeevan-abc/project-devops /root/mern-cicd-digitalocean
            fi
            cd /root/mern-cicd-digitalocean
            git pull origin main
            cd server
            npm install
            pm2 restart mern-app || pm2 start server.js --name mern-app
            echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDD0NWYSpt4d6jz8WIfnKxBmC/uWz/nv6wOXtLaU70o6fapJ00eCx+pgiQ+XuJWBQIjjHoy0n4xkgKvGOklcaJlpH2uLo+2Te19+Rs57gTTEN6PnaAhTxGDP9DyxkNoV7A9OTsomkmZ1U2lEF8UTyAO95/nAFTMyie+W3gJNOJGc4Avh3udowqIL0HLp0OBrx3E1jtMKvCcxQJ7xMjFfXddQvD/aIkhC9bnpA+XTmeMCo10ADPtIDd3Ru1EFjXRmJwm7ycQ/lT+q9kDcwx2MPt2JzYCMW/25KGWDVrbP0QSsrc6NNFlNt5XBBBTtIwB6qBpxrS1DBvoKHw9QLObROrR/EiL13/B87KjJ34oEnpjFkRsQNfbjMjJUsGD7bh0XpvbwfOR+8s7+TlnFrHUXg9H9n3Ga5i2olIXx2l3egBut+3SK665ruDDf66m/xAhiUijnCGLW8q+vk4X7FqOHJzK5JTkapxxx6E3glg+MI7iyYE/tY+PXCe0Xjh0n9RZIvqGGLRQSKJeOzQCnGN+MRDEHT/d9KINIXogxgYWNTZZ8g9Xy3xqXt4gLspPlwjMsUCCx2/elYD4FK15k4SRz6fe8qXEyno5ZI2VpmVz5C7DjHb5CWmgkUqp6BqA4lXjx64o2xd1gAJVrlZl058q/aNlruuS1GGbZDPcg+VAbf0ZjQ== jeevan.raj@abc.courses" > /root/.ssh/authorized_keys
            sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
            systemctl restart sshd